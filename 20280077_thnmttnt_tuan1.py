# -*- coding: utf-8 -*-
"""20280077_THNMTTNT_Tuan1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yTpIIGBBdEbf6DAUoAx6Oi4wYEQsDVKW
"""

from google.colab import files
files.upload()
from collections import defaultdict
from queue import Queue , PriorityQueue
def bfs(graph,start,end):
    visited = []
    frontier =Queue()
    
    frontier.put(start)
    visited.append(start)
    
    parent =dict()
    parent[start]=None
    
    path_found =False
    
    while True:
        if frontier.empty():
            raise Exception("No way Exception")
        current_node =frontier.get()
        visited.append(current_node)
        
        # Kiểm tra current_node có là end hay không
        if current_node == end:
            path_found =True 
            break 
        for node in graph[current_node]:
            if node not in visited:
                frontier.put(node)
                parent[node]=current_node 
                visited.append(node)
        
    path=[]
    if path_found:
          path.append(end)
          while parent[end] is not None:
                path.append(parent[end])
                end = parent[end]
          path.reverse()
    return path


def dfs(graph,start,end):
    visited =[] 
    frontier = []
    
    # them node start vao frontier va visited
    frontier.append(start) 
    visited.append(start)
    # start khong co node cha
    parent = dict()
    parent[start]=None
    
    path_found = False 
    
    while True:
        if frontier == []:
            raise Exception("No way Exception") 
        current_node = frontier.pop()
        visited.append(current_node) 
     
     # Kiem tra current_node co la end hay khong 
        if current_node ==end:
            path_found = True 
            break 
     
        for node in graph[current_node]:
            if node not in visited:
                frontier.append(node)
                parent[node] = current_node
                visited.append(node)
# Xay dung duong dfs
    path =[] 
    if path_found:
          path.append(end)
          while parent[end] is not None:
              path.append(parent[end])
              end = parent[end]
          path.reverse() 
    return path


def UCS(graph,start,end):
    visited =[]
    frontier = PriorityQueue()
    # Them node start vao frontier va visited 
    frontier.put((0,start))
    visited.append(start)
# start khong co node cha
    parent = dict()
    parent[start] = None
    path_found = False

    while True:
        if frontier.empty():
            raise Exception("No way Exception")
        current_w,current_node = frontier.get()
        visited.append(current_node)
    # Kiem tra current_node co la end hay khong 
        if current_node == end:
            path_found = True 
            break
        for nodei in graph[current_node]:
            node,weight = nodei
            if node not in visited:
                frontier.put((current_w + weight,node)) 
                parent[node] = current_node 
                visited.append(node) 
# Xay dung duong di
    path =[] 
    if path_found:
          path.append(end)
          while parent[end] is not None:
                path.append(parent[end])
                end = parent[end]
          path.reverse() 
    return current_w,path
  
def read_txt(file): 
    size=int(file.readline())
    start,goal = [int(num) for num in file.readline().split(' ')]
    matrix =[[int(num) for num in line.split(' ')] for line in file]
    return size,start,goal,matrix 
# chuyen ma tran ke thanh danh sach ke
def convert_graph(a):
    adjList=defaultdict(list)
    for i in range (len(a)):
        for j in range(len(a[i])):
            if a[i][j]==1:
                adjList[i].append(j)
    return adjList
def convert_graph_weight(a):
    adjList = defaultdict(list)
    for i in range (len(a)):
        for j in range(len(a[i])):
            if a[i][j]!=0:
                adjList[i].append((j,a[i][j]))
    return adjList
    
if __name__ == "__main__":
    # doc file input.txt va InputUCS.txt
    file_1 = open("Input.txt","r")
    file_2 = open("InputUCS.txt","r")
    size_1, start_1, goal_1, matrix_1 =read_txt(file_1) 
    size_2, start_2, goal_2, matrix_2 =read_txt(file_2) 
    file_1.close()
    file_2.close()
    graph_1 = convert_graph(matrix_1)
    graph_2 = convert_graph_weight(matrix_2)
    
# thuc thi thuat toan BFS
result_bfs = bfs(graph_1 ,start_1,goal_1)
print("Ket qua su dung thuat toan BFS: \n",result_bfs) 
# Thuc thi thuat toan DFS
result_dfs = dfs(graph_1,start_1,goal_1) 
print("Ket qua su dung thuat toan DFS: \n",result_dfs)
# Thuc thi thuat toan UCS
cost,result_ucs = UCS(graph_2,start_2,goal_2) 
print("Ket qua su dung thuat toan UCS: \n",result_ucs,"Voi tong chi phi la",cost)